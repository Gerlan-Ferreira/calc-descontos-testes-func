package net.quebradoresanonimos.calculator.e2e.tests;// Generated by Selenium IDE

import net.quebradoresanonimos.calculator.e2e.core.BaseTest;
import net.quebradoresanonimos.calculator.e2e.pages.InitialPageObject;
import net.quebradoresanonimos.calculator.e2e.pages.ProductDiscountResultPageObject;
import org.junit.jupiter.api.*;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;

@DisplayName("REQ001 - Calcular Desconto do Produto")
public class Req001_ProductDiscountCalculationTest extends BaseTest {

  private InitialPageObject page;
  private ProductDiscountResultPageObject pageResult;


  @BeforeEach
  public void setUp() {
    initialize();
    this.page = new InitialPageObject(driver);
    this.pageResult = new ProductDiscountResultPageObject(driver);
  }

  @AfterEach
  public void tearDown() {
    killDriver();
    this.page = null;
  }

  private String testStepsDefault(String clientType, Integer quantity) {
    return this.page.goToProductsListFromMenu()
            .selectProductFromListCode(2)
            .setClientType(clientType)
            .setQuantity(quantity)
            .submit()
            .getDiscountFactorText();
  }

  private String testStespsDefaultMessage(){
    return this.pageResult.getMessageResult();
  }

  @Nested
  @DisplayName("Quando o cliente for do tipo A")
  class ClientA {

    final String CLIENT_A = "A";
    @Test
    @DisplayName("E quantidade entre 1 e 99 ENTAO fator de desconto igual a 0,90 (ou seja, 10% de desconto)")
    public void testWhenClientTypeAQuantityLessThen100() {
      String result = testStepsDefault(CLIENT_A, 1);
      String resultMessage = testStespsDefaultMessage();
      assertThat(result, is("0,90 (ou seja, 10% de desconto)"));
      assertThat(resultMessage, is ("Operação realizada com sucesso!"));
    }
    @Test
    @DisplayName("E quantidade entre 100 e 999 ENTAO fator de desconto igual a 0,95 (ou seja, 5% de desconto)")
    public void testWhenClientTypeAQuantityLessThen1000() {
      String result = testStepsDefault(CLIENT_A, 100);
      String resultMessage = testStespsDefaultMessage();
      assertThat(result, is("0,95 (ou seja, 5% de desconto)"));
      assertThat(resultMessage, is ("Operação realizada com sucesso!"));
    }
    @Test
    @DisplayName("E quantidade a partir de 1000 ENTAO fator de desconto igual a 1,00 (ou seja, 0% de desconto)")
    public void testWhenClientTypeAQuantityGreaterThen1000() {
      String result = testStepsDefault(CLIENT_A, 1000);
      String resultMessage = testStespsDefaultMessage();
      assertThat(result, is("1,00 (ou seja, 0% de desconto)"));
      assertThat(resultMessage, is ("Operação realizada com sucesso!"));
    }

  }

  @Nested
  @DisplayName("Quando o cliente for do tipo B")
  class ClientB {

    final String CLIENT_B = "B";
    @Test
    @DisplayName("E quantidade entre 1 e 99 ENTAO fator de desconto igual a 0,85 (ou seja, 15% de desconto)")
    public void testWhenClientTypeBQuantityLessThen100() {
      String result = testStepsDefault(CLIENT_B, 1);
      String resultMessage = testStespsDefaultMessage();
      assertThat(result, is("0,85 (ou seja, 15% de desconto)"));
      assertThat(resultMessage, is ("Operação realizada com sucesso!"));
    }
    @Test
    @DisplayName("E quantidade entre 100 e 999 ENTAO fator de desconto igual a 0,90 (ou seja, 10% de desconto)")
    public void testWhenClientTypeAQuantityLessThen1000() {
      String result = testStepsDefault(CLIENT_B, 100);
      String resultMessage = testStespsDefaultMessage();
      assertThat(result, is("0,90 (ou seja, 10% de desconto)"));
      assertThat(resultMessage, is ("Operação realizada com sucesso!"));
    }
    @Test
    @DisplayName("E quantidade a partir de 1000 ENTAO fator de desconto igual a 0,95 (ou seja, 5% de desconto)")
    public void testWhenClientTypeAQuantityGreaterThen1000() {
      String result = testStepsDefault(CLIENT_B, 1000);
      String resultMessage = testStespsDefaultMessage();
      assertThat(result, is("0,95 (ou seja, 5% de desconto)"));
      assertThat(resultMessage, is ("Operação realizada com sucesso!"));
    }

  }

  @Nested
  @DisplayName("Quando o cliente for do tipo C")
  class ClientC {

    final String CLIENT_C = "C";
    @Test
    @DisplayName("E quantidade entre 1 e 99 ENTAO fator de desconto igual a 0,80 (ou seja, 20% de desconto)")
    public void testWhenClientTypeBQuantityLessThen100() {
      String result = testStepsDefault(CLIENT_C, 1);
      String resultMessage = testStespsDefaultMessage();
      assertThat(result, is("0,80 (ou seja, 20% de desconto)"));
      assertThat(resultMessage, is ("Operação realizada com sucesso!"));
    }
    @Test
    @DisplayName("E quantidade entre 100 e 999 ENTAO fator de desconto igual a 0,95 (ou seja, 5% de desconto)")
    public void testWhenClientTypeAQuantityLessThen1000() {
      String result = testStepsDefault(CLIENT_C, 100);
      String resultMessage = testStespsDefaultMessage();
      assertThat(result, is("0,85 (ou seja, 15% de desconto)"));
      assertThat(resultMessage, is ("Operação realizada com sucesso!"));
    }
    @Test
    @DisplayName("E quantidade a partir de 1000 ENTAO fator de desconto igual a 0,90 (ou seja, 10% de desconto)")
    public void testWhenClientTypeAQuantityGreaterThen1000() {
      String result = testStepsDefault(CLIENT_C, 1000);
      String resultMessage = testStespsDefaultMessage();
      assertThat(result, is("0,90 (ou seja, 10% de desconto)"));
      assertThat(resultMessage, is ("Operação realizada com sucesso!"));
    }

  }
}
